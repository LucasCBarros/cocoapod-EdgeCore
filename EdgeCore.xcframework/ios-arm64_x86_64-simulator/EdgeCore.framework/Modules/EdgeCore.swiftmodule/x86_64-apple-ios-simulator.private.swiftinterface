// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EdgeCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Alamofire
import AppAuth
import Foundation
import JWTDecode
import Swift
import SwiftyJSON
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension EdgeCore.EdgeClient {
  final public class func responseJSON(response: Alamofire.AFDataResponse<Foundation.Data>, jsonDataKey: Swift.String? = nil) -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  final public class func responseData(response: Alamofire.AFDataResponse<Foundation.Data>) -> Swift.Result<Foundation.Data, Foundation.NSError>
  final public class func responsePagingInfo(response: Alamofire.AFDataResponse<Foundation.Data>, pagingHandler: (_ paging: EdgeCore.EdgeClient.Request.PagingInfo?) -> Swift.Void)
  final public class func responseError(response: Alamofire.AFDataResponse<Foundation.Data>) -> Foundation.NSError?
}
extension EdgeCore.EdgeClient {
  public struct Node : Swift.Codable {
    public var id: Swift.String?
    public var name: Swift.String?
    public var accountId: Swift.String?
    public var os: Swift.String?
    public var url: Swift.String?
    public var routing: EdgeCore.EdgeClient.Node.Routing?
    public var description: Swift.String {
      get
    }
    public init(id: Swift.String?, name: Swift.String?, accountId: Swift.String?, os: Swift.String?, url: Swift.String?, routing: EdgeCore.EdgeClient.Node.Routing?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public static func defaultNodeName() -> Swift.String
    public func encode(with aCoder: Foundation.NSCoder)
    public func defaultNodeName() -> Swift.String
    public func effectiveUrl() -> Foundation.URL?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public class func callBackend<T>(config: EdgeCore.EdgeClient.Request.Config, type: T.Type) async -> Swift.Result<T, Foundation.NSError> where T : Swift.Decodable, T : Swift.Encodable
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public class func callBackend(config: EdgeCore.EdgeClient.Request.Config) async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.IdentityResponse {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case connection
    case provider
    case userId
    case isSocial
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension EdgeCore.EdgeClient.IdentityUser {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case userId
    case email
    case phoneNumber
    case roles
    case identities
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func dictionary() -> [Swift.String : Any]?
  public func jsonString() -> Swift.String?
}
extension EdgeCore.EdgeProvider.Beams {
  public struct Beam : Swift.Codable {
    public enum ReadStatus : Swift.String {
      case unknown
      case read
      case unread
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum AccessStatus {
      case ready(message: Swift.String)
      case error(message: Swift.String)
      public func message() -> Swift.String
    }
    public var id: Swift.String?
    public var name: Swift.String?
    public var mimeType: Swift.String?
    public var url: Swift.String?
    public var nodeId: Swift.String?
    public var createTime: Swift.String?
    public var readStatus: Swift.String?
    public var thumbnailContentHint: EdgeCore.EdgeProvider.Beams.BeamThumbnail?
    public var deletableTime: Swift.String?
    public var expirationDate: Foundation.Date {
      get
    }
    public var description: Swift.String {
      get
    }
    public init(id: Swift.String?, name: Swift.String?, mimeType: Swift.String?, url: Swift.String?, nodeId: Swift.String?, createTime: Swift.String?, readStatus: Swift.String?, deletableTime: Swift.String?, thumbnailContentHint: EdgeCore.EdgeProvider.Beams.BeamThumbnail?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public static func defaultNodeName() -> Swift.String
    public func readStatusEnum() -> EdgeCore.EdgeProvider.Beams.Beam.ReadStatus
    public func filename() -> Swift.String?
    public func fileExtension() -> Swift.String?
    public func uttype() -> UniformTypeIdentifiers.UTType?
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public struct Service {
    public var rootUrl: Foundation.URL
    public var clientId: Swift.String
    public var expectedSwaggerFileVersion: Swift.String?
    public var healthCheckPath: Swift.String?
    public var authScopes: [Swift.String]?
    public var basePath: Swift.String?
    public init?(coder aDecoder: Foundation.NSCoder)
    public init(rootUrl: Foundation.URL, clientId: Swift.String, expectedSwaggerFileVersion: Swift.String?, healthCheckPath: Swift.String?, basePath: Swift.String? = nil, authScopes: [Swift.String]? = [])
    public init(rootUrl: Foundation.URL, clientId: Swift.String, basePath: Swift.String? = nil, authScopes: [Swift.String] = [])
    public func encode(with aCoder: Foundation.NSCoder)
    public func urlComponents() -> Foundation.URLComponents?
  }
}
extension EdgeCore.EdgeProvider.Beams {
  #if compiler(>=5.3) && $AsyncAwait
  public static func effectiveBeamUrl(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: EdgeCore.EdgeProvider.Beams.Beam, beamOwnerCode: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<Foundation.URL, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func downloadBeamFile(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: EdgeCore.EdgeProvider.Beams.Beam, storageUrl: Foundation.URL, beamOwnerCode: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<Foundation.URL, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.Node {
  public struct Routing : Swift.Codable {
    public var id: Swift.String?
    public var port: Swift.Int64?
    public var url: Swift.String?
    public var description: Swift.String {
      get
    }
    public init(id: Swift.String?, port: Swift.Int64?, url: Swift.String?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Beams {
  #if compiler(>=5.3) && $AsyncAwait
  public static func beamTokens(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> [EdgeCore.EdgeProvider.Beams.BeamToken]?
  #endif
}
extension EdgeCore.EdgeProvider {
  public struct Drive {
    #if compiler(>=5.3) && $AsyncAwait
    public static func files(userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: EdgeCore.EdgeClient.Microservice) async -> [EdgeCore.EdgeProvider.Drive.File]?
    #endif
  }
}
@objc @_inheritsConvenienceInitializers public class EdgeProvider : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension EdgeCore.EdgeClient.Microservice {
  public struct Image {
    public var description: Swift.String {
      get
    }
    public var id: Swift.String?
    public var digest: Swift.String?
    public var created: Swift.Double
    public var name: Swift.String?
    public var size: Swift.Int
    public var repoTags: SwiftyJSON.JSON?
    public var fullJSON: SwiftyJSON.JSON?
    public init?(json: SwiftyJSON.JSON)
  }
}
extension EdgeCore.EdgeProvider.Beams {
  public struct BeamThumbnail : Swift.Codable {
    public var image: Swift.String?
    public var mimeType: Swift.String?
    public var description: Swift.String {
      get
    }
    public init(image: Swift.String?, mimeType: Swift.String?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Clusters {
  public struct NodeData : Swift.Codable {
    public var type: Swift.String?
    public var data: [EdgeCore.EdgeClient.Node]?
    public var description: Swift.String {
      get
    }
    public init(type: Swift.String?, data: [EdgeCore.EdgeClient.Node]?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public static func parseNodes(data: Foundation.Data) -> [EdgeCore.EdgeClient.Node]?
    public static func parseNode(data: Foundation.Data) -> EdgeCore.EdgeClient.Node?
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public struct Config {
    public var imageName: Swift.String
    public var containerName: Swift.String
    public var baseApiPath: Swift.String
    public var envVariables: [Swift.String : Swift.String]
    public var description: Swift.String {
      get
    }
    public init(imageName: Swift.String, containerName: Swift.String, baseApiPath: Swift.String, envVariables: [Swift.String : Swift.String])
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public struct Container {
    public var description: Swift.String {
      get
    }
    public var imageId: Swift.String?
    public var image: Swift.String?
    public var state: Swift.String?
    public var created: Swift.Double
    public var name: Swift.String?
    public var id: Swift.String?
    public var env: [Swift.String : Any]?
    public var fullJSON: SwiftyJSON.JSON?
    public init?(json: SwiftyJSON.JSON)
    public func mcmBaseApiPath() -> Swift.String?
  }
}
extension EdgeCore.EdgeProvider.Drive {
  public struct FileCreateManaged {
    public var name: Swift.String
    public var mimeType: Swift.String
    public var localId: Swift.String
    public var thumbnailBase64: Swift.String
    public var inputUrl: Foundation.URL
    public init(name: Swift.String, mimeType: Swift.String, localId: Swift.String, thumbnailBase64: Swift.String, inputUrl: Foundation.URL)
    public func filename() -> Swift.String?
    public func storageUrl() -> Foundation.URL?
  }
}
@objc @_inheritsConvenienceInitializers final public class EdgeClient : ObjectiveC.NSObject {
  public enum Backend : Swift.String {
    case development
    case qa
    case staging
    case production
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public class func setLoggingLevel(level: EdgeCore.EdgeClient.Log.Level, subsystem: EdgeCore.EdgeClient.Log.SubSystem = .edgeCore)
  final public class func selectBackend(backend: EdgeCore.EdgeClient.Backend)
  final public class func selectedBackend() -> EdgeCore.EdgeClient.Backend
  final public class func activateExternalEdgeEngine(host: Swift.String, port: Swift.Int) -> Swift.Result<Foundation.URLComponents, Foundation.NSError>
  final public class func externalEdgeEngineActivated() -> Swift.Bool
  final public class func deactivateExternalEdgeEngine() -> Swift.Result<Swift.Bool, Foundation.NSError>
  #if compiler(>=5.3) && $AsyncAwait
  final public func healthCheck(service: EdgeCore.EdgeClient.Service, requireMatch: Swift.Bool = false) async -> Swift.Result<EdgeCore.EdgeClient.HealthCheck.Response, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployMicroservice(edgeEngineAccessToken: Swift.String, config: EdgeCore.EdgeClient.Microservice.Config, imageTarPath: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func updateMicroservice(edgeEngineAccessToken: Swift.String, microservice: EdgeCore.EdgeClient.Microservice, imageTarPath: Swift.String, envVariables: [Swift.String : Swift.String]? = [:]) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func updateMicroserviceConfig(edgeEngineAccessToken: Swift.String, microservice: EdgeCore.EdgeClient.Microservice, envVariables: [Swift.String : Swift.String]) async -> Swift.Result<Swift.Bool, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func undeployMicroservice(edgeEngineAccessToken: Swift.String, microservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<Swift.Bool, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func undeployMicroserviceComponent(edgeEngineAccessToken: Swift.String, component: EdgeCore.EdgeClient.Microservice.Component, identifier: Swift.String) async -> Swift.Result<Swift.Bool, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroservices(edgeEngineAccessToken: Swift.String) async -> Swift.Result<[EdgeCore.EdgeClient.Microservice], Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroservice(imageId: Swift.String, containerId: Swift.String, edgeEngineAccessToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroserviceImages(edgeEngineAccessToken: Swift.String) async -> Swift.Result<[EdgeCore.EdgeClient.Microservice.Image], Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroserviceImage(imageId: Swift.String, edgeEngineAccessToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice.Image?, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroserviceContainers(edgeEngineAccessToken: Swift.String) async -> Swift.Result<[EdgeCore.EdgeClient.Microservice.Container], Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroserviceContainer(containerId: Swift.String, edgeEngineAccessToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice.Container?, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func edgeEngineIdToken() async -> Swift.Result<Swift.String, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func edgeEngineInfo() async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func externalEdgeEngineIsRunning() async -> Swift.Bool
  #endif
  final public func edgeEngineUrlComponents() -> Foundation.URLComponents
  final public func edgeEngineUrlString() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension EdgeCore.EdgeProvider.Beams {
  public struct BeamToken : Swift.Codable {
    public enum TokenStatus : Swift.String {
      case unknown
      case active
      case cancelled
      case expired
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var id: Swift.String?
    public var token: Swift.String?
    public var name: Swift.String?
    public var mimeType: Swift.String?
    public var toNodeId: Swift.String?
    public var expires: Swift.Int64?
    public var url: Swift.String?
    public var playQueueUrl: Swift.String?
    public var status: Swift.String?
    public var viewCount: Swift.Int64?
    public var lastViewedAt: Swift.Int64?
    public var thumbnailContentHint: EdgeCore.EdgeProvider.Beams.BeamThumbnail?
    public var expirationDate: Foundation.Date {
      get
    }
    public var lastViewedDate: Foundation.Date? {
      get
    }
    public var description: Swift.String {
      get
    }
    public init(id: Swift.String?, token: Swift.String?, name: Swift.String?, mimeType: Swift.String?, toNodeId: Swift.String?, expires: Swift.Int64?, url: Swift.String?, playQueueUrl: Swift.String?, status: Swift.String?, viewCount: Swift.Int64?, lastViewedAt: Swift.Int64?, thumbnailContentHint: EdgeCore.EdgeProvider.Beams.BeamThumbnail?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public func isExpired() -> Swift.Bool
    public func tokenStatus() -> EdgeCore.EdgeProvider.Beams.BeamToken.TokenStatus
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public enum JSONValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case integer(Swift.Int)
    case double(Swift.Double)
    case bool(Swift.Bool)
    case object([Swift.String : EdgeCore.EdgeClient.JSONValue])
    case array([EdgeCore.EdgeClient.JSONValue])
    case null
    public init(from decoder: any Swift.Decoder) throws
    public static func == (a: EdgeCore.EdgeClient.JSONValue, b: EdgeCore.EdgeClient.JSONValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension EdgeCore.EdgeProvider.Beams {
  #if compiler(>=5.3) && $AsyncAwait
  public static func deleteBeamToken(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamToken: EdgeCore.EdgeProvider.Beams.BeamToken, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> EdgeCore.EdgeProvider.Beams.BeamToken?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func updateBeamToken(status: EdgeCore.EdgeProvider.Beams.BeamToken.TokenStatus, edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamToken: EdgeCore.EdgeProvider.Beams.BeamToken, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> EdgeCore.EdgeProvider.Beams.BeamToken?
  #endif
}
extension EdgeCore.EdgeProvider.Beams {
  public struct BeamData : Swift.Codable {
    public var data: [EdgeCore.EdgeProvider.Beams.Beam]?
    public var description: Swift.String {
      get
    }
    public init(data: [EdgeCore.EdgeProvider.Beams.Beam]?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public static func parseBeams(data: Foundation.Data) -> [EdgeCore.EdgeProvider.Beams.Beam]?
    public static func parseBeam(data: Foundation.Data) -> EdgeCore.EdgeProvider.Beams.Beam?
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  final public class func manuallySelectedBackend() -> EdgeCore.EdgeClient.Backend?
  final public class func applicationBackend() -> EdgeCore.EdgeClient.Backend
  final public class func forceDefaultBackendSelection()
  final public class func defaultBackend() -> EdgeCore.EdgeClient.Backend
}
extension EdgeCore.EdgeProvider.Beams {
  public struct CreateBeam {
    public var sourceNodeId: Swift.String
    public var destinationNodeId: Swift.String
    public var mimeType: Swift.String
    public var name: Swift.String
    public var thumbnailBase64: Swift.String
    public var filename: Swift.String
    public var expiration: Swift.Int64
    public var localStoragePath: Swift.String
    public init(sourceNodeId: Swift.String, destinationNodeId: Swift.String, mimeType: Swift.String, name: Swift.String, thumbnailBase64: Swift.String, filename: Swift.String, expiration: Swift.Int64, localStoragePath: Swift.String)
  }
  #if compiler(>=5.3) && $AsyncAwait
  public static func create(beam: EdgeCore.EdgeProvider.Beams.CreateBeam, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, superdriveMicroservice: EdgeCore.EdgeClient.Microservice, beamOwnerCode: Swift.String) async -> Swift.Bool
  #endif
}
extension EdgeCore.EdgeProvider.Drive {
  #if compiler(>=5.3) && $AsyncAwait
  public static func createManaged(file: EdgeCore.EdgeProvider.Drive.FileCreateManaged, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: EdgeCore.EdgeClient.Microservice, driveOwnerCode: Swift.String) async -> Swift.Result<EdgeCore.EdgeProvider.Drive.File, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.Request {
  @_hasMissingDesignatedInitializers open class CodableHelper {
    public static var dateformatter: Foundation.DateFormatter?
    open class func decode<T>(_ type: T.Type, from data: Foundation.Data) -> (decodableObj: T?, error: (any Swift.Error)?) where T : Swift.Decodable
    open class func encode<T>(_ value: T, prettyPrint: Swift.Bool = false) -> (data: Foundation.Data?, error: (any Swift.Error)?) where T : Swift.Encodable
    @objc deinit
  }
}
extension EdgeCore.EdgeClient {
  public struct Microservice {
    public enum Component : Swift.String {
      case image
      case container
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var description: Swift.String {
      get
    }
    public var container: EdgeCore.EdgeClient.Microservice.Container?
    public var image: EdgeCore.EdgeClient.Microservice.Image?
    public var imageTarPath: Swift.String?
    public var clientId: Swift.String?
    public var apiKey: Swift.String?
    public init(image: EdgeCore.EdgeClient.Microservice.Image, container: EdgeCore.EdgeClient.Microservice.Container)
    public static func validateMicroserviceResponse(response: Alamofire.AFDataResponse<Any>, encapsulatedData: Swift.Bool = false) -> (dataJSON: SwiftyJSON.JSON?, error: (any Swift.Error)?)
    public static func microserviceConfiguration(imageName: Swift.String, containerName: Swift.String, baseAPIPath: Swift.String, edgeEngineUrlComponents: Foundation.URLComponents, clientId: Swift.String, signatureKey: Swift.String, ownerCode: Swift.String) -> EdgeCore.EdgeClient.Microservice.Config?
    public static func expectedDeployedImageId(imageName: Swift.String, clientId: Swift.String) -> Swift.String
    public static func expectedDeployedContainerId(containerName: Swift.String, clientId: Swift.String) -> Swift.String
    public static func expectedDeployedBaseApiPath(name: Swift.String, clientId: Swift.String) -> Swift.String
    public static func expectedImageName(name: Swift.String) -> Swift.String
    public static func expectedContainerName(name: Swift.String) -> Swift.String
    public static func expectedBaseApiPath(name: Swift.String) -> Swift.String
    public func basePath() -> Swift.String?
    public func fullPath() -> Swift.String?
    public func urlComponents() -> Foundation.URLComponents?
    public func urlComponents(withEndpoint endpoint: Swift.String) -> Foundation.URLComponents?
  }
}
extension EdgeCore.EdgeProvider {
  public struct Clusters {
    public enum ClusterType : Swift.String {
      case nearby
      case account
      case friend
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    #if compiler(>=5.3) && $AsyncAwait
    public static func findNodes(type: EdgeCore.EdgeProvider.Clusters.ClusterType, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> [EdgeCore.EdgeClient.Node]?
    #endif
    #if compiler(>=5.3) && $AsyncAwait
    public static func findNodesDebugJson(type: EdgeCore.EdgeProvider.Clusters.ClusterType, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> SwiftyJSON.JSON?
    #endif
  }
}
extension EdgeCore.EdgeProvider {
  public struct Beams {
    #if compiler(>=5.3) && $AsyncAwait
    public static func beams(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<[EdgeCore.EdgeProvider.Beams.Beam], Foundation.NSError>
    #endif
  }
}
extension EdgeCore.EdgeClient.Authorization {
  public enum AccountAssociationAction : Swift.String {
    case authorize
    case unauthorize
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum TokenType : Swift.String {
    case edgeEngineAccessToken
    case custom
    case driveAccessToken
    case userAccessToken
    case validationCodes
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum GrantType : Swift.String {
    case phoneNumber
    case emailPassword
    case idTokenSignin
    case trustTokenSignin
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum GrantAction : Swift.String {
    case register
    case login
    case changePassword
    case resetPassword
    case resetPasswordApply
    case loginApply
    case emptyActionPhoneNumber
    case emptyActionIdToken
    case emptyActionDeveloperIdToken
    case emptyActionFederation
    case emptyActionCreateEmail
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct ValidationCodes {
    public var mfaCode: Swift.String? {
      get
    }
    public var oobCode: Swift.String? {
      get
    }
    public var bindingCode: Swift.String? {
      get
    }
    public init(mfaCode: Swift.String?, oobCode: Swift.String?, bindingCode: Swift.String?)
    public var description: Swift.String {
      get
    }
  }
}
extension EdgeCore.EdgeProvider.Drive {
  #if compiler(>=5.3) && $AsyncAwait
  public static func create(file: EdgeCore.EdgeProvider.Drive.FileCreate, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: EdgeCore.EdgeClient.Microservice, driveOwnerCode: Swift.String) async -> Swift.Result<EdgeCore.EdgeProvider.Drive.File, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeProvider.Beams {
  #if compiler(>=5.3) && $AsyncAwait
  public static func openBeam(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: EdgeCore.EdgeProvider.Beams.Beam, beamOwnerCode: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeProvider.Beams.Beam, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func deleteBeam(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: EdgeCore.EdgeProvider.Beams.Beam, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeProvider.Beams.Beam, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func updateBeam(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: EdgeCore.EdgeProvider.Beams.Beam, status: EdgeCore.EdgeProvider.Beams.Beam.ReadStatus, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeProvider.Beams.Beam, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient {
  public struct Log {
    public enum Level : Swift.Int {
      case debug
      case info
      case error
      case fault
      case off
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum SubSystem {
      case custom(Swift.String)
      case edgeCore
      case edgeEngine
      case edgeUser
      case mimikAccess
    }
    public static func loggingLevel(subsystem: EdgeCore.EdgeClient.Log.SubSystem) -> EdgeCore.EdgeClient.Log.Level
    public static func logType(function: Swift.String, line: Swift.Int, items: Any..., type: EdgeCore.EdgeClient.Log.Level, subsystem: EdgeCore.EdgeClient.Log.SubSystem, marker: Swift.String? = nil, displayPrivately: Swift.Bool = false)
    public static func logInfo(function: Swift.String, line: Swift.Int, items: Any..., subsystem: EdgeCore.EdgeClient.Log.SubSystem, marker: Swift.String? = nil, displayPrivately: Swift.Bool = false)
    public static func logDebug(function: Swift.String, line: Swift.Int, items: Any..., subsystem: EdgeCore.EdgeClient.Log.SubSystem, marker: Swift.String? = nil, displayPrivately: Swift.Bool = false)
    public static func logFault(function: Swift.String, line: Swift.Int, items: Any..., subsystem: EdgeCore.EdgeClient.Log.SubSystem, marker: Swift.String? = nil, displayPrivately: Swift.Bool = false)
    public static func logError(function: Swift.String, line: Swift.Int, items: Any..., subsystem: EdgeCore.EdgeClient.Log.SubSystem, marker: Swift.String? = "⚠️⚠️⚠️", displayPrivately: Swift.Bool = false)
  }
}
extension EdgeCore.EdgeProvider.Drive {
  #if compiler(>=5.3) && $AsyncAwait
  public static func delete(file: EdgeCore.EdgeProvider.Drive.File, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: EdgeCore.EdgeClient.Microservice, driveOwnerCode: Swift.String) async -> Swift.Result<EdgeCore.EdgeProvider.Drive.File, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient {
  public struct IdentityResponse : Swift.Codable {
    public var connection: Swift.String?
    public var provider: Swift.String?
    public var userId: Swift.String?
    public var isSocial: Swift.Bool?
    public init(connection: Swift.String?, provider: Swift.String?, userId: Swift.String?, isSocial: Swift.Bool?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Drive {
  public struct FileData : Swift.Codable {
    public var kind: Swift.String?
    public var files: [EdgeCore.EdgeProvider.Drive.File]?
    public var description: Swift.String {
      get
    }
    public init(kind: Swift.String?, files: [EdgeCore.EdgeProvider.Drive.File]?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public static func parseFiles(data: Foundation.Data) -> [EdgeCore.EdgeProvider.Drive.File]?
    public static func parseFile(data: Foundation.Data) -> EdgeCore.EdgeProvider.Drive.File?
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func uploadContent(sourceFileUrl: Foundation.URL, destinationUrl: Foundation.URL, mimeType: Swift.String, progressHandler: @escaping EdgeCore.EdgeClient.Request.ProgressHandler) async -> Swift.Result<Swift.Bool, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func downloadContent(sourceUrl: Foundation.URL, destinationFileUrl: Foundation.URL, progressHandler: @escaping EdgeCore.EdgeClient.Request.ProgressHandler) async -> Swift.Result<Swift.Bool, any Swift.Error>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func downloadImageContent(sourceUrl: Foundation.URL) async -> Swift.Result<UIKit.UIImage, any Swift.Error>
  #endif
}
extension EdgeCore.EdgeClient.Request {
  public struct Config {
    public let service: EdgeCore.EdgeClient.Service
    public let path: Swift.String
    public let method: Alamofire.HTTPMethod
    public let queryItems: [Foundation.URLQueryItem]?
    public let authorization: EdgeCore.EdgeClient.Authorization?
    public let parameters: [Swift.String : Any]?
    public let httpHeaders: Alamofire.HTTPHeaders?
    public let jsonDataKey: Swift.String?
    public let pagingHandler: EdgeCore.EdgeClient.Request.PagingHandler?
    public init(service: EdgeCore.EdgeClient.Service, path: Swift.String, method: Alamofire.HTTPMethod, queryItems: [Foundation.URLQueryItem]?, authorization: EdgeCore.EdgeClient.Authorization?, parameters: [Swift.String : Any]?, httpHeaders: Alamofire.HTTPHeaders? = nil, jsonDataKey: Swift.String? = nil, pagingHandler: EdgeCore.EdgeClient.Request.PagingHandler? = nil)
  }
}
extension EdgeCore.EdgeClient {
  public struct StartupParameters : Swift.Codable {
    public enum LogLevel : Swift.String, Swift.Codable {
      case trace
      case debug
      case info
      case warn
      case error
      case critical
      case off
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum NodeInfoLevel : Swift.String, Swift.Codable {
      case on
      case off
      case name
      case hwInfoOnly
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum LocalDiscovery : Swift.String, Swift.Codable {
      case on
      case off
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var logLevel: EdgeCore.EdgeClient.StartupParameters.LogLevel
    public var nodeInfoLevel: EdgeCore.EdgeClient.StartupParameters.NodeInfoLevel
    public var nodeName: Swift.String
    public var localDiscovery: EdgeCore.EdgeClient.StartupParameters.LocalDiscovery
    public var license: Swift.String
    public var description: Swift.String {
      get
    }
    public init(license: Swift.String, logLevel: EdgeCore.EdgeClient.StartupParameters.LogLevel = .error, nodeInfoLevel: EdgeCore.EdgeClient.StartupParameters.NodeInfoLevel = .off, nodeName: Swift.String = UIDevice.current.name + "-" + UIDevice.current.model, localDiscovery: EdgeCore.EdgeClient.StartupParameters.LocalDiscovery = .off)
    public init?(coder aDecoder: Foundation.NSCoder)
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  final public class func uttypeFor(fileExtension: Swift.String) -> UniformTypeIdentifiers.UTType?
  final public class func uttypeFor(mimeType: Swift.String) -> UniformTypeIdentifiers.UTType?
  final public class func fileExtensionFor(type: UniformTypeIdentifiers.UTType) -> Swift.String?
  final public class func fileExtentionFor(mimeType: Swift.String) -> Swift.String?
  final public class func mimeTypeFor(type: UniformTypeIdentifiers.UTType) -> Swift.String?
  final public class func mimeTypeFor(fileExtension: Swift.String) -> Swift.String?
}
extension EdgeCore.EdgeClient {
  public struct IdentityUser : Swift.Codable {
    public var userId: Swift.String?
    public var email: Swift.String?
    public var phoneNumber: Swift.String?
    public var roles: [Swift.String]?
    public var identities: EdgeCore.EdgeClient.JSONValue?
    public init(userId: Swift.String?, email: Swift.String?, phoneNumber: Swift.String?, roles: [Swift.String]?, identities: EdgeCore.EdgeClient.JSONValue?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public struct HealthCheck : Swift.Codable {
    public enum Result : Swift.String {
      case unknown
      case expected
      case unexpectedContinue
      case unexpectedFail
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public struct Response {
      public var service: EdgeCore.EdgeClient.Service
      public var result: EdgeCore.EdgeClient.HealthCheck.Result
      public var message: Swift.String
      public var description: Swift.String {
        get
      }
      public init(service: EdgeCore.EdgeClient.Service, result: EdgeCore.EdgeClient.HealthCheck.Result, message: Swift.String)
    }
    public struct HealthCheckClusterStatus : Swift.Codable {
      public var nbServers: Swift.String?
      public var updatedAt: Foundation.Date?
      public init(nbServers: Swift.String?, updatedAt: Foundation.Date?)
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct HealthCheckDeploymentGitRepo : Swift.Codable {
      public var branch: Swift.String?
      public var hashKey: Swift.String?
      public init(branch: Swift.String?, hashKey: Swift.String?)
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct HealthCheckDeployment : Swift.Codable {
      public var gitRepo: EdgeCore.EdgeClient.HealthCheck.HealthCheckDeploymentGitRepo?
      public var time: Swift.String?
      public init(gitRepo: EdgeCore.EdgeClient.HealthCheck.HealthCheckDeploymentGitRepo?, time: Swift.String?)
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public var swaggerFileVersion: Swift.String?
    public var type: Swift.String?
    public var uptime: Foundation.Decimal?
    public var version: Swift.String?
    public var registrationStatus: Swift.String?
    public var port: Swift.String?
    public var platform: Swift.String?
    public var pidValue: Swift.Int?
    public var nodeVersion: Swift.String?
    public var name: Swift.String?
    public var memoryUsage: EdgeCore.EdgeClient.JSONValue?
    public var location: EdgeCore.EdgeClient.JSONValue?
    public var id: Swift.String?
    public var environment: Swift.String?
    public var deployment: EdgeCore.EdgeClient.HealthCheck.HealthCheckDeployment?
    public var cpuUsage: EdgeCore.EdgeClient.JSONValue?
    public var clusterStatus: EdgeCore.EdgeClient.HealthCheck.HealthCheckClusterStatus?
    public var addresses: EdgeCore.EdgeClient.JSONValue?
    public init(swaggerFileVersion: Swift.String?, type: Swift.String?, uptime: Foundation.Decimal?, version: Swift.String?, registrationStatus: Swift.String?, port: Swift.String?, platform: Swift.String?, pidValue: Swift.Int?, nodeVersion: Swift.String?, name: Swift.String?, memoryUsage: EdgeCore.EdgeClient.JSONValue?, location: EdgeCore.EdgeClient.JSONValue?, id: Swift.String?, environment: Swift.String?, deployment: EdgeCore.EdgeClient.HealthCheck.HealthCheckDeployment?, cpuUsage: EdgeCore.EdgeClient.JSONValue?, clusterStatus: EdgeCore.EdgeClient.HealthCheck.HealthCheckClusterStatus?, addresses: EdgeCore.EdgeClient.JSONValue?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Drive {
  public struct File : Swift.Codable {
    public var id: Swift.String?
    public var kind: Swift.String?
    public var name: Swift.String?
    public var mimeType: Swift.String?
    public var createTime: Swift.String?
    public var localId: Swift.String?
    public var path: Swift.String?
    public var thumbnailLink: Swift.String?
    public var description: Swift.String {
      get
    }
    public init(id: Swift.String?, kind: Swift.String?, name: Swift.String?, mimeType: Swift.String?, createTime: Swift.String?, localId: Swift.String?, path: Swift.String?, thumbnailLink: Swift.String?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public func encode(with aCoder: Foundation.NSCoder)
    public func contentUrl() -> Foundation.URL?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Request {
  public typealias PagingHandler = (_ paging: EdgeCore.EdgeClient.Request.PagingInfo?) -> Swift.Void
  public struct PagingInfo {
    public let count: Swift.Int
    public let startAfter: Swift.String
    public init(count: Swift.Int, startAfter: Swift.String)
  }
}
extension EdgeCore.EdgeProvider.Clusters {
  #if compiler(>=5.3) && $AsyncAwait
  public static func nodePresenceCheck(beam: EdgeCore.EdgeProvider.Beams.Beam, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeClient.Node, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func nodePresenceCheck(node: EdgeCore.EdgeClient.Node, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeClient.Node, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func nodePresenceCheck(nodeId: Swift.String, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeClient.Node, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.Authorization {
  public static func jwtTokenDecoded(token: Swift.String) -> (any JWTDecode.JWT)?
  public static func jwtTokenExpiry(token: Swift.String) -> Foundation.Date?
  public static func jwtTokenValidation(token: Swift.String, type: EdgeCore.EdgeClient.Authorization.TokenType) -> Swift.Bool
  public static func jwtTokenJson(token: Swift.String) -> SwiftyJSON.JSON?
  public static func valueFromToken(token: Swift.String, key: Swift.String) -> Swift.String?
}
extension EdgeCore.EdgeProvider.Drive {
  public struct FileCreate : Swift.Codable {
    public var name: Swift.String
    public var mimeType: Swift.String
    public var localId: Swift.String
    public var thumbnailBase64: Swift.String
    public var storageUrl: Foundation.URL
    public init(name: Swift.String, mimeType: Swift.String, localId: Swift.String, thumbnailBase64: Swift.String, storageUrl: Foundation.URL)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public struct Authorization {
    public var type: EdgeCore.EdgeClient.Authorization.TokenType
    public init?(validationCodes: EdgeCore.EdgeClient.Authorization.ValidationCodes)
    public init?(type: EdgeCore.EdgeClient.Authorization.TokenType?, userAccessToken: Swift.String?, idToken: Swift.String? = nil, refreshToken: Swift.String? = nil, validationCodes: EdgeCore.EdgeClient.Authorization.ValidationCodes? = nil, accessTokenExpirationDate: Foundation.Date? = nil, tokenType: Swift.String? = nil, scope: Swift.String? = nil)
    public func accessToken() -> Swift.String?
    public func idToken() -> Swift.String?
    public func refreshToken() -> Swift.String?
    public func validationCodes() -> EdgeCore.EdgeClient.Authorization.ValidationCodes?
    public func accessTokenValidation() -> Swift.Bool
    public func accessTokenDecoded() -> (any JWTDecode.JWT)?
    public func accessTokenSub() -> Swift.String?
    public func accessTokenScopes() -> Swift.String?
    public func accessTokenExpiryDate() -> Foundation.Date?
    public static func accessTokenSub(token: Swift.String) -> Swift.String?
  }
}
public protocol EdgeEngineClient {
  static func setCustomPort(number: Swift.Int32) -> Swift.Bool
  static func expectedEdgeEngineVersion() -> Swift.String
  static func manageEdgeEngineRuntime(enable: Swift.Bool) throws
  #if compiler(>=5.3) && $AsyncAwait
  func startEdgeEngine(parameters: EdgeCore.EdgeClient.StartupParameters) async -> Swift.Result<Swift.Bool, Foundation.NSError>
  #endif
  func stopEdgeEngine()
  #if compiler(>=5.3) && $AsyncAwait
  func restartEdgeEngine() async -> Swift.Result<Swift.Bool, Foundation.NSError>
  #endif
  func resetEdgeEngine() -> Swift.Bool
  func edgeEngineIsRunning() -> Swift.Bool
  func edgeEngineParameters() -> EdgeCore.EdgeClient.StartupParameters?
  func edgeEngineRuntimeIsManaged() -> Swift.Bool
}
extension EdgeCore.EdgeProvider.Beams {
  public struct BeamTokenData : Swift.Codable {
    public var data: [EdgeCore.EdgeProvider.Beams.BeamToken]?
    public var description: Swift.String {
      get
    }
    public init(data: [EdgeCore.EdgeProvider.Beams.BeamToken]?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public static func parseBeamTokens(data: Foundation.Data) -> [EdgeCore.EdgeProvider.Beams.BeamToken]?
    public static func parseBeamToken(data: Foundation.Data) -> EdgeCore.EdgeProvider.Beams.BeamToken?
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  final public class func workingDirectory(searchPathDirectory: Foundation.FileManager.SearchPathDirectory, subFolder: Swift.String, filename: Swift.String? = nil) -> Foundation.URL?
  final public class func edgeEngineWorkingDirectory() -> Foundation.URL?
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func authenticateDeveloperAccess(developerIdToken: Swift.String, edgeEngineIdToken: Swift.String? = nil) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func authenticateEdgeEngineAccess(service: EdgeCore.EdgeClient.Service, phoneNumber: Swift.String, edgeEngineIdToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func authenticateEdgeEngineAccess(service: EdgeCore.EdgeClient.Service, grantAction: EdgeCore.EdgeClient.Authorization.GrantAction, email: Swift.String, currentPassword: Swift.String?, newPassword: Swift.String?, edgeEngineIdToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func validateEdgeEngineAccess(service: EdgeCore.EdgeClient.Service, grantType: EdgeCore.EdgeClient.Authorization.GrantType, grantAction: EdgeCore.EdgeClient.Authorization.GrantAction, codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, edgeEngineIdToken: Swift.String?, currentPassword: Swift.String? = nil, newPassword: Swift.String? = nil) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func authenticateUserAccess(service: EdgeCore.EdgeClient.Service, edgeEngineAccessAuthorization: EdgeCore.EdgeClient.Authorization) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func authenticateUserAccess(service: EdgeCore.EdgeClient.Service, federatedToken: Swift.String, policyId: Swift.String, edgeEngineIdToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deleteAccount(service: EdgeCore.EdgeClient.Service, accessToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.IdentityUser, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func accountInformation(service: EdgeCore.EdgeClient.Service, authorization: EdgeCore.EdgeClient.Authorization) async -> Swift.Result<EdgeCore.EdgeClient.IdentityUser, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func supportedAuthenticationScopes(serverUrl: Foundation.URL) async -> Swift.Result<[Swift.String], Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.Request {
  open class URLComponentsBuilder {
    public init()
    open func create() -> Foundation.URLComponents
    open func set(service: EdgeCore.EdgeClient.Service) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(scheme: Swift.String, host: Swift.String, port: Swift.Int, path: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(scheme: Swift.String, host: Swift.String, port: Swift.Int) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(scheme: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(host: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(port: Swift.Int) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(path: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func append(path: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    public func set(queryItems: [Swift.String : Any]) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    @objc deinit
  }
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func exportVideo(session: AVFoundation.AVAssetExportSession, outputURL: Foundation.URL, outFileType: AVFoundation.AVFileType) async -> Swift.Result<Swift.Bool, any Swift.Error>
  #endif
}
extension EdgeCore.EdgeClient {
  public struct Request {
    public typealias ProgressHandler = (_ progress: Foundation.Progress) -> Swift.Void
    public static func backendEncodedUrlRequest(urlRequest: Foundation.URLRequest, dictionary: [Swift.String : Any]?) -> Foundation.URLRequest?
    public static func backendUrlRequest(url: Foundation.URL, method: Alamofire.HTTPMethod, authorization: EdgeCore.EdgeClient.Authorization?, httpHeaders: Alamofire.HTTPHeaders? = nil) -> Foundation.URLRequest?
    public static func frontendUrlRequest(url: Foundation.URL, method: Alamofire.HTTPMethod, dictionary: [Swift.String : Any]?, microservice: EdgeCore.EdgeClient.Microservice, authorization: EdgeCore.EdgeClient.Authorization?, timeoutInterval: Foundation.TimeInterval = 60.0, cachePolicy: Foundation.URLRequest.CachePolicy = .useProtocolCachePolicy) -> Foundation.URLRequest?
  }
}
extension EdgeCore.EdgeClient.IdentityResponse.CodingKeys : Swift.Equatable {}
extension EdgeCore.EdgeClient.IdentityResponse.CodingKeys : Swift.Hashable {}
extension EdgeCore.EdgeClient.IdentityResponse.CodingKeys : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.IdentityUser.CodingKeys : Swift.Equatable {}
extension EdgeCore.EdgeClient.IdentityUser.CodingKeys : Swift.Hashable {}
extension EdgeCore.EdgeClient.IdentityUser.CodingKeys : Swift.RawRepresentable {}
extension EdgeCore.EdgeProvider.Beams.Beam.ReadStatus : Swift.Equatable {}
extension EdgeCore.EdgeProvider.Beams.Beam.ReadStatus : Swift.Hashable {}
extension EdgeCore.EdgeProvider.Beams.Beam.ReadStatus : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Backend : Swift.Equatable {}
extension EdgeCore.EdgeClient.Backend : Swift.Hashable {}
extension EdgeCore.EdgeClient.Backend : Swift.RawRepresentable {}
extension EdgeCore.EdgeProvider.Beams.BeamToken.TokenStatus : Swift.Equatable {}
extension EdgeCore.EdgeProvider.Beams.BeamToken.TokenStatus : Swift.Hashable {}
extension EdgeCore.EdgeProvider.Beams.BeamToken.TokenStatus : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Microservice.Component : Swift.Equatable {}
extension EdgeCore.EdgeClient.Microservice.Component : Swift.Hashable {}
extension EdgeCore.EdgeClient.Microservice.Component : Swift.RawRepresentable {}
extension EdgeCore.EdgeProvider.Clusters.ClusterType : Swift.Equatable {}
extension EdgeCore.EdgeProvider.Clusters.ClusterType : Swift.Hashable {}
extension EdgeCore.EdgeProvider.Clusters.ClusterType : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Authorization.AccountAssociationAction : Swift.Equatable {}
extension EdgeCore.EdgeClient.Authorization.AccountAssociationAction : Swift.Hashable {}
extension EdgeCore.EdgeClient.Authorization.AccountAssociationAction : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Authorization.TokenType : Swift.Equatable {}
extension EdgeCore.EdgeClient.Authorization.TokenType : Swift.Hashable {}
extension EdgeCore.EdgeClient.Authorization.TokenType : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Authorization.GrantType : Swift.Equatable {}
extension EdgeCore.EdgeClient.Authorization.GrantType : Swift.Hashable {}
extension EdgeCore.EdgeClient.Authorization.GrantType : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Authorization.GrantAction : Swift.Equatable {}
extension EdgeCore.EdgeClient.Authorization.GrantAction : Swift.Hashable {}
extension EdgeCore.EdgeClient.Authorization.GrantAction : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Log.Level : Swift.Equatable {}
extension EdgeCore.EdgeClient.Log.Level : Swift.Hashable {}
extension EdgeCore.EdgeClient.Log.Level : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.StartupParameters.LogLevel : Swift.Equatable {}
extension EdgeCore.EdgeClient.StartupParameters.LogLevel : Swift.Hashable {}
extension EdgeCore.EdgeClient.StartupParameters.LogLevel : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.StartupParameters.NodeInfoLevel : Swift.Equatable {}
extension EdgeCore.EdgeClient.StartupParameters.NodeInfoLevel : Swift.Hashable {}
extension EdgeCore.EdgeClient.StartupParameters.NodeInfoLevel : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.StartupParameters.LocalDiscovery : Swift.Equatable {}
extension EdgeCore.EdgeClient.StartupParameters.LocalDiscovery : Swift.Hashable {}
extension EdgeCore.EdgeClient.StartupParameters.LocalDiscovery : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.HealthCheck.Result : Swift.Equatable {}
extension EdgeCore.EdgeClient.HealthCheck.Result : Swift.Hashable {}
extension EdgeCore.EdgeClient.HealthCheck.Result : Swift.RawRepresentable {}
