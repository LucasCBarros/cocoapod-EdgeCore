// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name EdgeCore
import AVFoundation
import Alamofire
import AppAuth
import Foundation
import JWTDecode
import Swift
import SwiftyJSON
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension EdgeCore.EdgeClient.Request {
  public static func responseJSON(response: Alamofire.AFDataResponse<Foundation.Data>, dataKey: Swift.String? = nil) -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  public static func responseError(response: Alamofire.AFDataResponse<Foundation.Data>) -> Foundation.NSError?
}
extension EdgeCore.EdgeClient {
  public struct Node : Swift.Codable {
    public var id: Swift.String?
    public var name: Swift.String?
    public var accountId: Swift.String?
    public var os: Swift.String?
    public var url: Swift.String?
    public var routing: EdgeCore.EdgeClient.Node.Routing?
    public var description: Swift.String {
      get
    }
    public static func preferredNodeName() -> Swift.String
    public func effectiveUrl() -> Foundation.URL?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Request {
  #if compiler(>=5.3) && $AsyncAwait
  public static func call<T>(config: EdgeCore.EdgeClient.Request.Config, type: T.Type) async -> Swift.Result<T, Foundation.NSError> where T : Swift.Decodable, T : Swift.Encodable
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func call(config: EdgeCore.EdgeClient.Request.Config) async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.Request {
  public static func decode<T>(_ type: T.Type, from data: Foundation.Data) -> (decodableObj: T?, error: (any Swift.Error)?) where T : Swift.Decodable
}
extension EdgeCore.EdgeProvider.Beams {
  public struct Beam : Swift.Codable {
    public enum ReadStatus : Swift.String {
      case unknown
      case read
      case unread
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum AccessStatus {
      case ready(message: Swift.String)
      case error(message: Swift.String)
      public func message() -> Swift.String
    }
    public var id: Swift.String?
    public var name: Swift.String?
    public var mimeType: Swift.String?
    public var url: Swift.String?
    public var nodeId: Swift.String?
    public var createTime: Swift.String?
    public var readStatus: Swift.String?
    public var thumbnailContentHint: EdgeCore.EdgeProvider.Beams.BeamThumbnail?
    public var deletableTime: Swift.String?
    public var expirationDate: Foundation.Date {
      get
    }
    public var description: Swift.String {
      get
    }
    public init(id: Swift.String?, name: Swift.String?, mimeType: Swift.String?, url: Swift.String?, nodeId: Swift.String?, createTime: Swift.String?, readStatus: Swift.String?, deletableTime: Swift.String?, thumbnailContentHint: EdgeCore.EdgeProvider.Beams.BeamThumbnail?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public static func defaultNodeName() -> Swift.String
    public func readStatusEnum() -> EdgeCore.EdgeProvider.Beams.Beam.ReadStatus
    public func filename() -> Swift.String?
    public func fileExtension() -> Swift.String?
    public func uttype() -> UniformTypeIdentifiers.UTType?
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Authorization {
  public struct ValidationCodes : Swift.Codable {
    public var mfaCode: Swift.String? {
      get
    }
    public var oobCode: Swift.String? {
      get
    }
    public var bindingCode: Swift.String? {
      get
    }
    public init(mfaCode: Swift.String?, oobCode: Swift.String?, bindingCode: Swift.String?)
    public var description: Swift.String {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func authorizeBackendUse(authorization: EdgeCore.EdgeClient.Authorization, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func authorizeBackendUse(federatedToken: Swift.String, policyId: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient {
  public struct Service : Swift.Codable {
    public var rootUrl: Foundation.URL
    public var basePath: Swift.String?
    public var clientId: Swift.String?
    public var expectedVersion: Swift.String?
    public var healthCheckPath: Swift.String?
    public var scope: [Swift.String]?
    public init(rootUrl: Foundation.URL, basePath: Swift.String? = nil, clientId: Swift.String? = nil, expectedVersion: Swift.String? = nil, healthCheckPath: Swift.String? = nil, scope: [Swift.String]? = [])
    #if compiler(>=5.3) && $AsyncAwait
    public func healthCheck() async -> Swift.Result<EdgeCore.EdgeClient.Service.HealthCheck, Foundation.NSError>
    #endif
    #if compiler(>=5.3) && $AsyncAwait
    public func versionCheck(requireMatch: Swift.Bool = false) async -> Swift.Result<EdgeCore.EdgeClient.Service.VersionCheck, Foundation.NSError>
    #endif
    public func urlComponents() -> Foundation.URLComponents?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Beams {
  #if compiler(>=5.3) && $AsyncAwait
  public static func effectiveBeamUrl(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: EdgeCore.EdgeProvider.Beams.Beam, beamOwnerCode: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<Foundation.URL, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func downloadBeamFile(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: EdgeCore.EdgeProvider.Beams.Beam, storageUrl: Foundation.URL, beamOwnerCode: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<Foundation.URL, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.Node {
  public struct Routing : Swift.Codable {
    public var id: Swift.String?
    public var port: Swift.Int64?
    public var url: Swift.String?
    public var description: Swift.String {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Beams {
  #if compiler(>=5.3) && $AsyncAwait
  public static func beamTokens(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> [EdgeCore.EdgeProvider.Beams.BeamToken]?
  #endif
}
extension EdgeCore.EdgeProvider {
  public struct Drive : Swift.Codable {
    #if compiler(>=5.3) && $AsyncAwait
    public static func files(userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: EdgeCore.EdgeClient.Microservice) async -> [EdgeCore.EdgeProvider.Drive.File]?
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@objc @_inheritsConvenienceInitializers public class EdgeProvider : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension EdgeCore.EdgeClient.Microservice {
  public struct Image : Swift.Codable {
    public var id: Swift.String?
    public var digest: Swift.String?
    public var created: Swift.Double
    public var name: Swift.String?
    public var size: Swift.Int
    public var repoTags: SwiftyJSON.JSON?
    public var fullJSON: SwiftyJSON.JSON?
    public var description: Swift.String {
      get
    }
    public init?(json: SwiftyJSON.JSON)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Beams {
  public struct BeamThumbnail : Swift.Codable {
    public var image: Swift.String?
    public var mimeType: Swift.String?
    public var description: Swift.String {
      get
    }
    public init(image: Swift.String?, mimeType: Swift.String?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Clusters {
  public struct NodeData : Swift.Codable {
    public var type: Swift.String?
    public var data: [EdgeCore.EdgeClient.Node]?
    public var description: Swift.String {
      get
    }
    public init(type: Swift.String?, data: [EdgeCore.EdgeClient.Node]?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public static func parseNodes(data: Foundation.Data) -> [EdgeCore.EdgeClient.Node]?
    public static func parseNode(data: Foundation.Data) -> EdgeCore.EdgeClient.Node?
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public struct Config {
    public var imageName: Swift.String
    public var containerName: Swift.String
    public var basePath: Swift.String
    public var envVariables: [Swift.String : Swift.String]
    public var description: Swift.String {
      get
    }
    public init(imageName: Swift.String, containerName: Swift.String, basePath: Swift.String, envVariables: [Swift.String : Swift.String])
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public struct Container : Swift.Codable {
    public var imageId: Swift.String?
    @available(*, deprecated, renamed: "imageId")
    public var image: Swift.String?
    public var state: Swift.String?
    public var created: Swift.Double
    public var name: Swift.String?
    public var id: Swift.String?
    public var env: [Swift.String : SwiftyJSON.JSON]?
    public var fullJSON: SwiftyJSON.JSON?
    public var description: Swift.String {
      get
    }
    public init?(json: SwiftyJSON.JSON)
    public func basePath() -> Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Drive {
  public struct FileCreateManaged {
    public var name: Swift.String
    public var mimeType: Swift.String
    public var localId: Swift.String
    public var thumbnailBase64: Swift.String
    public var inputUrl: Foundation.URL
    public init(name: Swift.String, mimeType: Swift.String, localId: Swift.String, thumbnailBase64: Swift.String, inputUrl: Foundation.URL)
    public func filename() -> Swift.String?
    public func storageUrl() -> Foundation.URL?
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public static func validateMicroserviceResponse(response: Alamofire.AFDataResponse<Any>, encapsulatedData: Swift.Bool = false) -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  public static func preferredConfig(imageName: Swift.String, containerName: Swift.String, basePath: Swift.String, edgeEngineFullPathUrl: Foundation.URLComponents, clientId: Swift.String, envVariables: [Swift.String : Swift.String]? = nil, signatureKey: Swift.String? = nil, ownerCode: Swift.String? = nil) -> EdgeCore.EdgeClient.Microservice.Config?
  public static func expectedDeployedImageId(imageName: Swift.String, clientId: Swift.String) -> Swift.String
  public static func expectedDeployedContainerId(containerName: Swift.String, clientId: Swift.String) -> Swift.String
  public static func expectedDeployedBasePath(path: Swift.String, clientId: Swift.String) -> Swift.String
  public static func preferredImageName(name: Swift.String) -> Swift.String
  public static func preferredContainerName(name: Swift.String) -> Swift.String
  public static func preferredBasePath(path: Swift.String) -> Swift.String
}
@objc @_inheritsConvenienceInitializers final public class EdgeClient : ObjectiveC.NSObject {
  final public class func setLoggingLevel(level: EdgeCore.EdgeClient.Log.Level, module: EdgeCore.EdgeClient.Log.Module = .edgeCore)
  final public class func activateExternalEdgeEngine(host: Swift.String, port: Swift.Int) -> Swift.Result<Foundation.URLComponents, Foundation.NSError>
  final public class func externalEdgeEngineIsActivated() -> Swift.Bool
  final public class func deactivateExternalEdgeEngine() -> Swift.Result<Swift.Void, Foundation.NSError>
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployMicroservice(edgeEngineAccessToken: Swift.String, config: EdgeCore.EdgeClient.Microservice.Config, imageTarPath: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func updateMicroservice(edgeEngineAccessToken: Swift.String, microservice: EdgeCore.EdgeClient.Microservice, imageTarPath: Swift.String, envVariables: [Swift.String : Swift.String]? = [:]) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func updateMicroserviceEnv(edgeEngineAccessToken: Swift.String, microservice: EdgeCore.EdgeClient.Microservice, envVariables: [Swift.String : Swift.String]) async -> Swift.Result<Swift.Void, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func undeployMicroservice(edgeEngineAccessToken: Swift.String, microservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<Swift.Void, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func undeployMicroserviceComponent(edgeEngineAccessToken: Swift.String, component: EdgeCore.EdgeClient.Microservice.Component, identifier: Swift.String) async -> Swift.Result<Swift.Void, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroservices(edgeEngineAccessToken: Swift.String) async -> Swift.Result<[EdgeCore.EdgeClient.Microservice], Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroservice(imageId: Swift.String, containerId: Swift.String, edgeEngineAccessToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroserviceImages(edgeEngineAccessToken: Swift.String) async -> Swift.Result<[EdgeCore.EdgeClient.Microservice.Image], Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroserviceImage(imageId: Swift.String, edgeEngineAccessToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice.Image?, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroserviceContainers(edgeEngineAccessToken: Swift.String) async -> Swift.Result<[EdgeCore.EdgeClient.Microservice.Container], Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func deployedMicroserviceContainer(containerId: Swift.String, edgeEngineAccessToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice.Container?, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func edgeEngineIdToken() async -> Swift.Result<Swift.String, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func edgeEngineInfo() async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func externalEdgeEngineIsRunning() async -> Swift.Bool
  #endif
  final public func edgeEngineFullPathUrl() -> Foundation.URLComponents
  @objc override dynamic public init()
  @objc deinit
}
extension EdgeCore.EdgeProvider.Beams {
  public struct BeamToken : Swift.Codable {
    public enum TokenStatus : Swift.String {
      case unknown
      case active
      case cancelled
      case expired
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var id: Swift.String?
    public var token: Swift.String?
    public var name: Swift.String?
    public var mimeType: Swift.String?
    public var toNodeId: Swift.String?
    public var expires: Swift.Int64?
    public var url: Swift.String?
    public var playQueueUrl: Swift.String?
    public var status: Swift.String?
    public var viewCount: Swift.Int64?
    public var lastViewedAt: Swift.Int64?
    public var thumbnailContentHint: EdgeCore.EdgeProvider.Beams.BeamThumbnail?
    public var expirationDate: Foundation.Date {
      get
    }
    public var lastViewedDate: Foundation.Date? {
      get
    }
    public var description: Swift.String {
      get
    }
    public init(id: Swift.String?, token: Swift.String?, name: Swift.String?, mimeType: Swift.String?, toNodeId: Swift.String?, expires: Swift.Int64?, url: Swift.String?, playQueueUrl: Swift.String?, status: Swift.String?, viewCount: Swift.Int64?, lastViewedAt: Swift.Int64?, thumbnailContentHint: EdgeCore.EdgeProvider.Beams.BeamThumbnail?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public func isExpired() -> Swift.Bool
    public func tokenStatus() -> EdgeCore.EdgeProvider.Beams.BeamToken.TokenStatus
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public enum JSONValue : Swift.Codable, Swift.Equatable {
    case string(Swift.String)
    case integer(Swift.Int)
    case double(Swift.Double)
    case bool(Swift.Bool)
    case object([Swift.String : EdgeCore.EdgeClient.JSONValue])
    case array([EdgeCore.EdgeClient.JSONValue])
    case null
    public init(from decoder: any Swift.Decoder) throws
    public static func == (a: EdgeCore.EdgeClient.JSONValue, b: EdgeCore.EdgeClient.JSONValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
extension EdgeCore.EdgeProvider.Beams {
  #if compiler(>=5.3) && $AsyncAwait
  public static func deleteBeamToken(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamToken: EdgeCore.EdgeProvider.Beams.BeamToken, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> EdgeCore.EdgeProvider.Beams.BeamToken?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func updateBeamToken(status: EdgeCore.EdgeProvider.Beams.BeamToken.TokenStatus, edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamToken: EdgeCore.EdgeProvider.Beams.BeamToken, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> EdgeCore.EdgeProvider.Beams.BeamToken?
  #endif
}
extension EdgeCore.EdgeProvider.Beams {
  public struct BeamData : Swift.Codable {
    public var data: [EdgeCore.EdgeProvider.Beams.Beam]?
    public var description: Swift.String {
      get
    }
    public init(data: [EdgeCore.EdgeProvider.Beams.Beam]?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public static func parseBeams(data: Foundation.Data) -> [EdgeCore.EdgeProvider.Beams.Beam]?
    public static func parseBeam(data: Foundation.Data) -> EdgeCore.EdgeProvider.Beams.Beam?
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Beams {
  public struct CreateBeam {
    public var sourceNodeId: Swift.String
    public var destinationNodeId: Swift.String
    public var mimeType: Swift.String
    public var name: Swift.String
    public var thumbnailBase64: Swift.String
    public var filename: Swift.String
    public var expiration: Swift.Int64
    public var localStoragePath: Swift.String
    public init(sourceNodeId: Swift.String, destinationNodeId: Swift.String, mimeType: Swift.String, name: Swift.String, thumbnailBase64: Swift.String, filename: Swift.String, expiration: Swift.Int64, localStoragePath: Swift.String)
  }
  #if compiler(>=5.3) && $AsyncAwait
  public static func create(beam: EdgeCore.EdgeProvider.Beams.CreateBeam, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, superdriveMicroservice: EdgeCore.EdgeClient.Microservice, beamOwnerCode: Swift.String) async -> Swift.Bool
  #endif
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func authorizeUser(email: Swift.String, password: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeProvider.Drive {
  #if compiler(>=5.3) && $AsyncAwait
  public static func createManaged(file: EdgeCore.EdgeProvider.Drive.FileCreateManaged, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: EdgeCore.EdgeClient.Microservice, driveOwnerCode: Swift.String) async -> Swift.Result<EdgeCore.EdgeProvider.Drive.File, Foundation.NSError>
  #endif
}
extension Swift.Encodable {
  public var dictionary: [Swift.String : Any]? {
    get
  }
  public func json() -> SwiftyJSON.JSON?
  public func jsonString() -> Swift.String?
  public func jsonData() -> Foundation.Data?
  public func encoded() throws -> Foundation.Data
}
extension Foundation.Data {
  public func decoded<T>(type: T.Type) -> T? where T : Swift.Decodable
  public func decoded<T>() throws -> T where T : Swift.Decodable
}
extension EdgeCore.EdgeClient {
  public struct Microservice : Swift.Codable {
    public enum Component : Swift.String {
      case image
      case container
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var description: Swift.String {
      get
    }
    public var container: EdgeCore.EdgeClient.Microservice.Container?
    public var image: EdgeCore.EdgeClient.Microservice.Image?
    public init(image: EdgeCore.EdgeClient.Microservice.Image, container: EdgeCore.EdgeClient.Microservice.Container)
    public func fullPathUrl() -> Foundation.URLComponents?
    public func fullPathUrl(withEndpoint endpoint: Swift.String) -> Foundation.URLComponents?
    public func basePath() -> Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider {
  public struct Clusters : Swift.Codable {
    public enum ClusterType : Swift.String {
      case nearby
      case account
      case friend
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    #if compiler(>=5.3) && $AsyncAwait
    public static func findNodes(type: EdgeCore.EdgeProvider.Clusters.ClusterType, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> [EdgeCore.EdgeClient.Node]?
    #endif
    #if compiler(>=5.3) && $AsyncAwait
    public static func findNodesDebugJson(type: EdgeCore.EdgeProvider.Clusters.ClusterType, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> SwiftyJSON.JSON?
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider {
  public struct Beams : Swift.Codable {
    #if compiler(>=5.3) && $AsyncAwait
    public static func beams(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<[EdgeCore.EdgeProvider.Beams.Beam], Foundation.NSError>
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Drive {
  #if compiler(>=5.3) && $AsyncAwait
  public static func create(file: EdgeCore.EdgeProvider.Drive.FileCreate, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: EdgeCore.EdgeClient.Microservice, driveOwnerCode: Swift.String) async -> Swift.Result<EdgeCore.EdgeProvider.Drive.File, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.Service {
  public struct VersionCheck : Swift.Codable {
    public enum Result : Swift.String, Swift.Codable {
      case unknown
      case expected
      case unexpectedWarning
      case unexpectedFailure
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let result: EdgeCore.EdgeClient.Service.VersionCheck.Result
    public let message: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Beams {
  #if compiler(>=5.3) && $AsyncAwait
  public static func openBeam(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: EdgeCore.EdgeProvider.Beams.Beam, beamOwnerCode: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeProvider.Beams.Beam, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func deleteBeam(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: EdgeCore.EdgeProvider.Beams.Beam, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeProvider.Beams.Beam, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func updateBeam(edgeServiceLink: Swift.String, userAccessToken: Swift.String, beam: EdgeCore.EdgeProvider.Beams.Beam, status: EdgeCore.EdgeProvider.Beams.Beam.ReadStatus, beamOwnerCode: Swift.String, beamMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeProvider.Beams.Beam, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient {
  public struct Log : Swift.Codable {
    public enum Level : Swift.Int {
      case debug
      case info
      case error
      case fault
      case off
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum Privacy {
      case privateOnly
      case publicAccess
      public static func == (a: EdgeCore.EdgeClient.Log.Privacy, b: EdgeCore.EdgeClient.Log.Privacy) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Module {
      case custom(Swift.String)
      case edgeCore
      case edgeEngine
      case edgeUser
      case mimikAccess
    }
    public static func loggingLevel(module: EdgeCore.EdgeClient.Log.Module) -> EdgeCore.EdgeClient.Log.Level
    public static func log(level: EdgeCore.EdgeClient.Log.Level, function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.EdgeClient.Log.Module, marker: Swift.String? = nil, privacy: EdgeCore.EdgeClient.Log.Privacy = .privateOnly)
    public static func logInfo(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.EdgeClient.Log.Module, marker: Swift.String? = nil, privacy: EdgeCore.EdgeClient.Log.Privacy = .privateOnly)
    public static func logDebug(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.EdgeClient.Log.Module, marker: Swift.String? = nil, privacy: EdgeCore.EdgeClient.Log.Privacy = .privateOnly)
    public static func logFault(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.EdgeClient.Log.Module, marker: Swift.String? = nil, privacy: EdgeCore.EdgeClient.Log.Privacy = .privateOnly)
    public static func logError(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.EdgeClient.Log.Module, marker: Swift.String? = "⚠️⚠️⚠️", privacy: EdgeCore.EdgeClient.Log.Privacy = .privateOnly)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Drive {
  #if compiler(>=5.3) && $AsyncAwait
  public static func delete(file: EdgeCore.EdgeProvider.Drive.File, userAccessToken: Swift.String, edgeEngineRuntimeLink: Foundation.URLComponents, driveMicroservice: EdgeCore.EdgeClient.Microservice, driveOwnerCode: Swift.String) async -> Swift.Result<EdgeCore.EdgeProvider.Drive.File, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.Authorization {
  public struct AccessToken : Swift.Codable {
    public var accessToken: Swift.String? {
      get
    }
    public var refreshToken: Swift.String? {
      get
    }
    public var scope: Swift.String? {
      get
    }
    public var tokenType: Swift.String? {
      get
    }
    public var expiresIn: Foundation.Date? {
      get
    }
    public var idToken: Swift.String? {
      get
    }
    public init(accessToken: Swift.String? = nil, refreshToken: Swift.String? = nil, scope: Swift.String? = nil, tokenType: Swift.String? = nil, expiresIn: Foundation.Date? = nil, idToken: Swift.String? = nil)
    public func validate() -> Swift.Result<Swift.Void, Foundation.NSError>
    public func decodeToJWT() -> (any JWTDecode.JWT)?
    public func decodeToJson() -> SwiftyJSON.JSON?
    public func subscriber() -> Swift.String?
    public func clientId() -> Swift.String?
    public func valueFrom(key: Swift.String) -> Swift.String?
    public static func validate(token: Swift.String, simpleCheck: Swift.Bool = false) -> Swift.Result<Swift.Void, Foundation.NSError>
    public static func decodeToJWT(token: Swift.String) -> (any JWTDecode.JWT)?
    public static func decodeToJson(token: Swift.String) -> SwiftyJSON.JSON?
    public static func subscriber(token: Swift.String) -> Swift.String?
    public static func expiresIn(token: Swift.String) -> Foundation.Date?
    public static func valueFrom(token: Swift.String, key: Swift.String) -> Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Drive {
  public struct FileData : Swift.Codable {
    public var kind: Swift.String?
    public var files: [EdgeCore.EdgeProvider.Drive.File]?
    public var description: Swift.String {
      get
    }
    public init(kind: Swift.String?, files: [EdgeCore.EdgeProvider.Drive.File]?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public static func parseFiles(data: Foundation.Data) -> [EdgeCore.EdgeProvider.Drive.File]?
    public static func parseFile(data: Foundation.Data) -> EdgeCore.EdgeProvider.Drive.File?
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Request {
  #if compiler(>=5.3) && $AsyncAwait
  public static func uploadContent(sourceFileUrl: Foundation.URL, destinationUrl: Foundation.URL, mimeType: Swift.String, progressHandler: @escaping EdgeCore.EdgeClient.Request.ProgressHandler) async -> Swift.Result<Swift.Void, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func downloadContent(sourceUrl: Foundation.URL, destinationFileUrl: Foundation.URL, progressHandler: @escaping EdgeCore.EdgeClient.Request.ProgressHandler) async -> Swift.Result<Swift.Void, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func downloadImageContent(sourceUrl: Foundation.URL) async -> Swift.Result<UIKit.UIImage, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.Request {
  public struct Config {
    public let service: EdgeCore.EdgeClient.Service
    public let path: Swift.String
    public let method: Alamofire.HTTPMethod
    public let queryItems: [Foundation.URLQueryItem]?
    public let authorization: EdgeCore.EdgeClient.Authorization?
    public let parameters: [Swift.String : Any]?
    public let httpHeaders: Alamofire.HTTPHeaders?
    public let dataKey: Swift.String?
    public let pagingHandler: EdgeCore.EdgeClient.Request.PagingInfoHandler?
    public init(service: EdgeCore.EdgeClient.Service, path: Swift.String, method: Alamofire.HTTPMethod, queryItems: [Foundation.URLQueryItem]?, authorization: EdgeCore.EdgeClient.Authorization?, parameters: [Swift.String : Any]?, httpHeaders: Alamofire.HTTPHeaders? = nil, dataKey: Swift.String? = nil, pagingHandler: EdgeCore.EdgeClient.Request.PagingInfoHandler? = nil)
  }
}
extension EdgeCore.EdgeClient {
  public struct StartupParameters : Swift.Codable {
    public var license: Swift.String
    public var logLevel: EdgeCore.EdgeClient.StartupParameters.LogLevel
    public var nodeInfoLevel: EdgeCore.EdgeClient.StartupParameters.NodeInfoLevel
    public var nodeName: Swift.String
    public var localDiscovery: EdgeCore.EdgeClient.StartupParameters.LocalDiscovery
    public enum LogLevel : Swift.String, Swift.Codable {
      case trace
      case debug
      case info
      case warn
      case error
      case critical
      case off
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum NodeInfoLevel : Swift.String, Swift.Codable {
      case on
      case off
      case name
      case hwInfoOnly
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum LocalDiscovery : Swift.String, Swift.Codable {
      case on
      case off
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var description: Swift.String {
      get
    }
    public init(license: Swift.String, logLevel: EdgeCore.EdgeClient.StartupParameters.LogLevel = .error, nodeInfoLevel: EdgeCore.EdgeClient.StartupParameters.NodeInfoLevel = .off, nodeName: Swift.String = UIDevice.current.name + "-" + UIDevice.current.model, localDiscovery: EdgeCore.EdgeClient.StartupParameters.LocalDiscovery = .off)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func passwordChange(email: Swift.String, currentPassword: Swift.String, newPassword: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient {
  public struct User : Swift.Codable {
    public var userId: Swift.String?
    public var email: Swift.String?
    public var phoneNumber: Swift.String?
    public var roles: [Swift.String]?
    public var identities: EdgeCore.EdgeClient.JSONValue?
    public init(userId: Swift.String?, email: Swift.String?, phoneNumber: Swift.String?, roles: [Swift.String]?, identities: EdgeCore.EdgeClient.JSONValue?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public struct Document : Swift.Codable {
    public static func uttypeFor(filenameExtension: Swift.String) -> UniformTypeIdentifiers.UTType?
    public static func uttypeFor(mimeType: Swift.String) -> UniformTypeIdentifiers.UTType?
    public static func filenameExtensionFor(type: UniformTypeIdentifiers.UTType) -> Swift.String?
    public static func filenameExtentionFor(mimeType: Swift.String) -> Swift.String?
    public static func mimeTypeFor(type: UniformTypeIdentifiers.UTType) -> Swift.String?
    public static func mimeTypeFor(filenameExtension: Swift.String) -> Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func authorizeDeveloper(developerIdToken: Swift.String, edgeEngineIdToken: Swift.String? = nil) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func passwordReset(email: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func validatePasswordReset(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, newPassword: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.Service {
  public struct HealthCheck : Swift.Codable {
    public struct ClusterStatus : Swift.Codable {
      public let nbServers: Swift.String?
      public let updatedAt: Foundation.Date?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct GitRepo : Swift.Codable {
      public let branch: Swift.String?
      public let hashKey: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Deployment : Swift.Codable {
      public let gitRepo: EdgeCore.EdgeClient.Service.HealthCheck.GitRepo?
      public let time: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Address : Swift.Codable {
      public let local: Swift.String?
      public let addressPublic: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MemoryUsage : Swift.Codable {
      public let xternal: Swift.Int?
      public let rss: Swift.Int?
      public let arrayBuffers: Swift.Int?
      public let heapUsed: Swift.Int?
      public let heapTotal: Swift.Int?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CPUUsage : Swift.Codable {
      public let user: Swift.Int?
      public let system: Swift.Int?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Location : Swift.Codable {
      public let type: Swift.String?
      public let coordinates: [Swift.Double]?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public let swaggerFileVersion: Swift.String?
    public let type: Swift.String?
    public let uptime: Foundation.Decimal?
    public let version: Swift.String?
    public let registrationStatus: Swift.String?
    public let port: Swift.String?
    public let platform: Swift.String?
    public let pidValue: Swift.Int?
    public let nodeVersion: Swift.String?
    public let name: Swift.String?
    public let memoryUsage: EdgeCore.EdgeClient.Service.HealthCheck.MemoryUsage?
    public let location: EdgeCore.EdgeClient.Service.HealthCheck.Location?
    public let id: Swift.String?
    public let environment: Swift.String?
    public let deployment: EdgeCore.EdgeClient.Service.HealthCheck.Deployment?
    public let cpuUsage: EdgeCore.EdgeClient.Service.HealthCheck.CPUUsage?
    public let clusterStatus: EdgeCore.EdgeClient.Service.HealthCheck.ClusterStatus?
    public let addresses: [EdgeCore.EdgeClient.Service.HealthCheck.Address]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Drive {
  public struct File : Swift.Codable {
    public var id: Swift.String?
    public var kind: Swift.String?
    public var name: Swift.String?
    public var mimeType: Swift.String?
    public var createTime: Swift.String?
    public var localId: Swift.String?
    public var path: Swift.String?
    public var thumbnailLink: Swift.String?
    public var description: Swift.String {
      get
    }
    public init(id: Swift.String?, kind: Swift.String?, name: Swift.String?, mimeType: Swift.String?, createTime: Swift.String?, localId: Swift.String?, path: Swift.String?, thumbnailLink: Swift.String?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public func encode(with aCoder: Foundation.NSCoder)
    public func contentUrl() -> Foundation.URL?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Request {
  public typealias PagingInfoHandler = (_ paging: EdgeCore.EdgeClient.Request.PagingInfo?) -> Swift.Void
  public typealias ProgressHandler = (_ progress: Foundation.Progress) -> Swift.Void
  public struct PagingInfo {
    public let count: Swift.Int
    public let startAfter: Swift.String
    public init(count: Swift.Int, startAfter: Swift.String)
  }
}
extension EdgeCore.EdgeProvider.Clusters {
  #if compiler(>=5.3) && $AsyncAwait
  public static func nodePresenceCheck(beam: EdgeCore.EdgeProvider.Beams.Beam, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeClient.Node, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func nodePresenceCheck(node: EdgeCore.EdgeClient.Node, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeClient.Node, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func nodePresenceCheck(nodeId: Swift.String, userAccessToken: Swift.String, beamOwnerCode: Swift.String, edgeServiceLink: Swift.String, superdriveMicroservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<EdgeCore.EdgeClient.Node, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeProvider.Drive {
  public struct FileCreate : Swift.Codable {
    public var name: Swift.String
    public var mimeType: Swift.String
    public var localId: Swift.String
    public var thumbnailBase64: Swift.String
    public var storageUrl: Foundation.URL
    public init(name: Swift.String, mimeType: Swift.String, localId: Swift.String, thumbnailBase64: Swift.String, storageUrl: Foundation.URL)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public struct Authorization : Swift.Codable {
    public var token: EdgeCore.EdgeClient.Authorization.AccessToken? {
      get
    }
    public var validationCodes: EdgeCore.EdgeClient.Authorization.ValidationCodes? {
      get
    }
    public init(token: EdgeCore.EdgeClient.Authorization.AccessToken)
    public init(validationCodes: EdgeCore.EdgeClient.Authorization.ValidationCodes)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func authorizeUser(phoneNumber: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func validateUser(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
}
public protocol EdgeEngineClient {
  static func setCustomPort(number: Swift.Int32) -> Swift.Result<Swift.Void, Foundation.NSError>
  static func expectedEdgeEngineVersion() -> Swift.String
  static func manageEdgeEngineLifecycle(manage: Swift.Bool) -> Swift.Result<Swift.Void, Foundation.NSError>
  #if compiler(>=5.3) && $AsyncAwait
  func startEdgeEngine(parameters: EdgeCore.EdgeClient.StartupParameters) async -> Swift.Result<Swift.Void, Foundation.NSError>
  #endif
  func stopEdgeEngine()
  #if compiler(>=5.3) && $AsyncAwait
  func restartEdgeEngine() async -> Swift.Result<Swift.Void, Foundation.NSError>
  #endif
  func resetEdgeEngine() -> Swift.Result<Swift.Void, Foundation.NSError>
  func edgeEngineIsRunning() -> Swift.Bool
  func edgeEngineParameters() -> EdgeCore.EdgeClient.StartupParameters?
  func edgeEngineLifecycleIsManaged() -> Swift.Bool
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func signup(email: Swift.String, password: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func validateSignup(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, password: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeProvider.Beams {
  public struct BeamTokenData : Swift.Codable {
    public var data: [EdgeCore.EdgeProvider.Beams.BeamToken]?
    public var description: Swift.String {
      get
    }
    public init(data: [EdgeCore.EdgeProvider.Beams.BeamToken]?)
    public init?(coder aDecoder: Foundation.NSCoder)
    public static func parseBeamTokens(data: Foundation.Data) -> [EdgeCore.EdgeProvider.Beams.BeamToken]?
    public static func parseBeamToken(data: Foundation.Data) -> EdgeCore.EdgeProvider.Beams.BeamToken?
    public func encode(with aCoder: Foundation.NSCoder)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  final public class func edgeEngineWorkingDirectory() -> Foundation.URL?
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func deleteAccount(email: Swift.String, password: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func validateDeleteAccount(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, password: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func executeDeleteAccount(authorization: EdgeCore.EdgeClient.Authorization, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient {
  #if compiler(>=5.3) && $AsyncAwait
  final public func accountInformation(service: EdgeCore.EdgeClient.Service, authorization: EdgeCore.EdgeClient.Authorization) async -> Swift.Result<EdgeCore.EdgeClient.User, Foundation.NSError>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func authenticationScopes(serverUrl: Foundation.URL) async -> Swift.Result<[Swift.String], Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient.Request {
  open class URLComponentsBuilder {
    public init()
    open func create() -> Foundation.URLComponents
    open func set(service: EdgeCore.EdgeClient.Service) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(scheme: Swift.String, host: Swift.String, port: Swift.Int, path: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(scheme: Swift.String, host: Swift.String, port: Swift.Int) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(scheme: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(host: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(port: Swift.Int) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(path: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func append(path: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    public func set(queryItems: [Swift.String : Any]) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    public func set(query: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    public func set(user: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    public func set(password: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    public func set(fragment: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    @objc deinit
  }
}
extension EdgeCore.EdgeClient.Request {
  #if compiler(>=5.3) && $AsyncAwait
  public static func exportVideo(session: AVFoundation.AVAssetExportSession, outputURL: Foundation.URL, outFileType: AVFoundation.AVFileType) async -> Swift.Result<Swift.Void, Foundation.NSError>
  #endif
}
extension EdgeCore.EdgeClient {
  public struct Request : Swift.Codable {
    public static func authorizedRequest(url: Foundation.URL, method: Alamofire.HTTPMethod, authorization: EdgeCore.EdgeClient.Authorization?, httpHeaders: Alamofire.HTTPHeaders?, parameters: [Swift.String : Any]?, contentType: Swift.String = "application/json") -> Foundation.URLRequest?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeProvider.Beams.Beam.ReadStatus : Swift.Equatable {}
extension EdgeCore.EdgeProvider.Beams.Beam.ReadStatus : Swift.Hashable {}
extension EdgeCore.EdgeProvider.Beams.Beam.ReadStatus : Swift.RawRepresentable {}
extension EdgeCore.EdgeProvider.Beams.BeamToken.TokenStatus : Swift.Equatable {}
extension EdgeCore.EdgeProvider.Beams.BeamToken.TokenStatus : Swift.Hashable {}
extension EdgeCore.EdgeProvider.Beams.BeamToken.TokenStatus : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Microservice.Component : Swift.Equatable {}
extension EdgeCore.EdgeClient.Microservice.Component : Swift.Hashable {}
extension EdgeCore.EdgeClient.Microservice.Component : Swift.RawRepresentable {}
extension EdgeCore.EdgeProvider.Clusters.ClusterType : Swift.Equatable {}
extension EdgeCore.EdgeProvider.Clusters.ClusterType : Swift.Hashable {}
extension EdgeCore.EdgeProvider.Clusters.ClusterType : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Service.VersionCheck.Result : Swift.Equatable {}
extension EdgeCore.EdgeClient.Service.VersionCheck.Result : Swift.Hashable {}
extension EdgeCore.EdgeClient.Service.VersionCheck.Result : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Log.Level : Swift.Equatable {}
extension EdgeCore.EdgeClient.Log.Level : Swift.Hashable {}
extension EdgeCore.EdgeClient.Log.Level : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Log.Privacy : Swift.Equatable {}
extension EdgeCore.EdgeClient.Log.Privacy : Swift.Hashable {}
extension EdgeCore.EdgeClient.StartupParameters.LogLevel : Swift.Equatable {}
extension EdgeCore.EdgeClient.StartupParameters.LogLevel : Swift.Hashable {}
extension EdgeCore.EdgeClient.StartupParameters.LogLevel : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.StartupParameters.NodeInfoLevel : Swift.Equatable {}
extension EdgeCore.EdgeClient.StartupParameters.NodeInfoLevel : Swift.Hashable {}
extension EdgeCore.EdgeClient.StartupParameters.NodeInfoLevel : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.StartupParameters.LocalDiscovery : Swift.Equatable {}
extension EdgeCore.EdgeClient.StartupParameters.LocalDiscovery : Swift.Hashable {}
extension EdgeCore.EdgeClient.StartupParameters.LocalDiscovery : Swift.RawRepresentable {}
